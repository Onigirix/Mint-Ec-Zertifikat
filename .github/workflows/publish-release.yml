name: 'publish-release'

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  update-version-number:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.extract_version.outputs.version_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Extract version number from tag
        id: extract_version
        run: |
          VERSION_FROM_TAG=$(echo "${{ github.event.release.tag_name }}" | sed -E 's/.*v?([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          echo "version_number=$VERSION_FROM_TAG" >> $GITHUB_OUTPUT

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update version in tauri.conf.json
        run: |
          jq '.version = "'"${{ steps.extract_version.outputs.version_number }}"'"' src-tauri/tauri.conf.json > tmp.json
          mv tmp.json src-tauri/tauri.conf.json

      - name: Update version in src-tauri/Cargo.toml
        run: |
          echo "Updating src-tauri/Cargo.toml to version ${{ steps.extract_version.outputs.version_number }}"
          sed -i -E "s/^version = \"[0-9]+\.[0-9]+\.[0-9]+\"/version = \"${{ steps.extract_version.outputs.version_number }}\"/" src-tauri/Cargo.toml

      - name: Commit and Push version changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

          git add src-tauri/tauri.conf.json src-tauri/Cargo.toml

          if git diff --staged --quiet; then
            echo "No version changes to commit. Files are already up-to-date with tag ${{ github.event.release.tag_name }}."
          else
            git commit -m "Bump version to ${{ steps.extract_version.outputs.version_number }} for release ${{ github.event.release.tag_name }}"
            git push origin --force HEAD:refs/tags/${{ github.event.release.tag_name }}
          fi
  publish-tauri:
    needs: update-version-number
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Wait for GitHub to update tag reference
        run: |
          sleep 30

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
          fetch-depth: 0

      - name: Install prerequisites (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh -s -- -y


      - name: Install winget (Windows)
        if: matrix.platform == 'windows-latest'
        uses: Cyberboss/install-winget@v1

      - name: Install prerequisites (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: >
          winget install --id Rustlang.Rustup --accept-source-agreements --accept-package-agreements

      - name: Enable long paths
        if: runner.os == 'Windows'
        shell: pwsh
        run: >
          New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" -Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force

      - name: Install prerequisites (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh -s -- -y
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install tauri
        run: |
          cargo install tauri-cli --version "^2.0.0" --locked

      - name: Build tauri app
        run: |
          cargo tauri build ${{ matrix.args }}
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Upload artifacts (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}
          path: |
            src-tauri/target/release/bundle/deb/Mint-EC_*.deb.sig
            src-tauri/target/release/bundle/appimage/Mint-EC_*.AppImage.sig
            src-tauri/target/release/bundle/rpm/Mint-EC-*.rpm.sig

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-x64
          path: src-tauri/target/release/bundle/nsis/*.exe.sig

      - name: Upload artifacts (MacOS x86)
        if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-x86_64
          path: ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos/Mint-EC.app.tar.gz.sig

      - name: Upload artifacts (MacOS aarch64)
        if: matrix.platform == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin'
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-aarch64
          path: ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Mint-EC.app.tar.gz.sig

      - name: "Upload to Release (MacOS x86_64)"
        if: matrix.platform == 'macos-latest' && matrix.args == '--target x86_64-apple-darwin'
        run: |
          cd ${{github.workspace}}
          mv ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos/Mint-EC.app.tar.gz ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos/Mint-EC_x86_64.app.tar.gz
          gh release upload ${{ github.event.release.tag_name }} ./src-tauri/target/x86_64-apple-darwin/release/bundle/macos/Mint-EC_x86_64.app.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Upload to Release (MacOS aarch64)"
        if: matrix.platform == 'macos-latest' && matrix.args == '--target aarch64-apple-darwin'
        run: |
          cd ${{github.workspace}}
          mv ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Mint-EC.app.tar.gz ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Mint-EC_aarch64.app.tar.gz
          gh release upload ${{ github.event.release.tag_name }} ./src-tauri/target/aarch64-apple-darwin/release/bundle/macos/Mint-EC_aarch64.app.tar.gz --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Upload to Release (Ubuntu)"
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          gh release upload ${{ github.event.release.tag_name }} ./src-tauri/target/release/bundle/deb/Mint-EC_*.deb --clobber
          gh release upload ${{ github.event.release.tag_name }} ./src-tauri/target/release/bundle/appimage/Mint-EC_*.AppImage --clobber
          gh release upload ${{ github.event.release.tag_name }} ./src-tauri/target/release/bundle/rpm/Mint-EC-*.rpm --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: "Upload to Release (Windows)"
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          cd ${{github.workspace}}
          gh release upload ${{ github.event.release.tag_name }} (Get-Item ${{github.workspace}}\src-tauri\target\release\bundle\nsis\*.exe) --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-latest-json:
    needs: publish-tauri
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v4
        - uses: actions/download-artifact@v4

        - name: Display structure of downloaded files
          run: ls -R

        - name: Upload latest.json
          run: |
            cd ${{github.workspace}}
            mkdir -p latest
            timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)
            version=$(echo "${{ github.event.release.tag_name }}" | sed -E 's/.*v?([0-9]+\.[0-9]+\.[0-9]+).*/\1/')

            echo "{
              \"version\": \"${{ github.event.release.tag_name }}\",
              \"notes\": \"${{ github.event.release.body }}\",
              \"pub_date\": \"$timestamp\",
              \"platforms\": {
                  \"darwin-x86_64\": {
                    \"url\": \"https://github.com/Onigirix/Mint-Ec-Zertifikat/releases/download/${{github.event.release.tag_name}}/Mint-EC_x86_64.app.tar.gz\",
                    \"signature\": \"$(cat ./tauri-app-x86_64/Mint-EC.app.tar.gz.sig)\"
                  },
                  \"darwin-aarch64\": {
                    \"url\": \"https://github.com/Onigirix/Mint-Ec-Zertifikat/releases/download/${{github.event.release.tag_name}}/Mint-EC_aarch64.app.tar.gz\",
                    \"signature\": \"$(cat ./tauri-app-aarch64/Mint-EC.app.tar.gz.sig)\"
                  },
                  \"linux-x86_64\": {
                    \"url\": \"https://github.com/Onigirix/Mint-Ec-Zertifikat/releases/download/${{github.event.release.tag_name}}/Mint-EC_${version}_amd64.AppImage\",
                    \"signature\": \"$(cat ./tauri-app-ubuntu-22.04/appimage/Mint-EC_${version}_amd64.AppImage.sig)\"
                  },
                  \"windows-x86_64\": {
                    \"url\": \"https://github.com/Onigirix/Mint-Ec-Zertifikat/releases/download/${{github.event.release.tag_name}}/Mint-EC_${version}_x64-setup.exe\",
                    \"signature\": \"$(cat ./tauri-app-x64/Mint-EC_${version}_x64-setup.exe.sig)\"
                  }
                }
              }" > latest/latest.json
            gh release upload ${{ github.event.release.tag_name }} ./latest/latest.json --clobber
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Checkout
          uses: actions/checkout@v4